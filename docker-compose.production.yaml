version: '3.8'

services:
  # Nginx service that acts as a reverse proxy
  nginx:
    image: ghcr.io/yourusername/yourrepo/nginx:latest  # Replace with your published NGINX image
    ports:
      - "80:80"  # Expose port 80 for web traffic
    depends_on:
      - books
      - orders
      - warehouse
      - front-end
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro  # Mount nginx configuration
    environment:
      - NGINX_HOST=your-production-domain.com  # Optional, set a domain for nginx
      - NGINX_PORT=80
    networks:
      - backend

  # Front-end service, replace with the correct path for your frontend image
  front-end:
    image: ghcr.io/yourusername/yourrepo/front-end:latest  # Replace with your published front-end image
    volumes:
      - ./adapter:/source/adapter  # Mount adapter directory
    environment:
      - FRONTEND_URL=http://your-production-url.com  # Optional, for front-end specific settings
    networks:
      - backend

  # Books service, replace with the correct image and add environment variables for DB and RabbitMQ connection
  books:
    image: ghcr.io/yourusername/yourrepo/books:latest  # Replace with your published books service image
    depends_on:
      - mongo-books
      - rabbitmq
    environment:
      - MONGO_URI=${MONGO_URI}  # Use environment variables for DB connection
      - RABBITMQ_URI=${RABBITMQ_URI}
    ports:
      - "5001:5001"  # Example port for the books service
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]  # Example health check endpoint

  # Orders service
  orders:
    image: ghcr.io/yourusername/yourrepo/orders:latest  # Replace with your published orders service image
    depends_on:
      - mongo-order
      - rabbitmq
    environment:
      - MONGO_URI=${MONGO_URI}
      - RABBITMQ_URI=${RABBITMQ_URI}
    ports:
      - "5002:5002"  # Example port for the orders service
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]  # Example health check endpoint

  # Warehouse service
  warehouse:
    image: ghcr.io/yourusername/yourrepo/warehouse:latest  # Replace with your published warehouse service image
    depends_on:
      - mongo-warehouse
      - rabbitmq
    environment:
      - MONGO_URI=${MONGO_URI}
      - RABBITMQ_URI=${RABBITMQ_URI}
    ports:
      - "5003:5003"  # Example port for the warehouse service
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]  # Example health check endpoint

  # API Documentation service
  docs:
    image: ghcr.io/yourusername/yourrepo/docs:latest  # Replace with your published docs service image
    depends_on:
      - books
      - orders
      - warehouse
    environment:
      - API_DOCS_URL=http://your-production-url.com/docs  # Optional, if docs are needed for API endpoints
    ports:
      - "5004:5004"  # Example port for the docs service
    networks:
      - backend

  # MongoDB for books data
  mongo-books:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "27017:27017"  # Default port for MongoDB
    volumes:
      - mongo-books-data:/data/db  # Persist data
    networks:
      - backend

  # MongoDB for warehouse data
  mongo-warehouse:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "27018:27017"  # Custom port for MongoDB (warehouse)
    volumes:
      - mongo-warehouse-data:/data/db  # Persist data
    networks:
      - backend

  # MongoDB for orders data
  mongo-order:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "27019:27017"  # Custom port for MongoDB (orders)
    volumes:
      - mongo-order-data:/data/db  # Persist data
    networks:
      - backend

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3.13-management  # RabbitMQ with management plugin
    ports:
      - "15672:15672"  # Port for RabbitMQ management UI
      - "5672:5672"    # Port for RabbitMQ message broker
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - backend

# Define networks for better isolation
networks:
  backend:
    driver: bridge  # You can use 'host' or 'overlay' for more complex setups

# Define volumes to persist data
volumes:
  mongo-books-data:
  mongo-warehouse-data:
  mongo-order-data:
